name: Deploy

on:
  push:
    branches:
      - master
  repository_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '>=13.2'
      - name: Get Yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-production-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-production-
      - name: Install build dependencies
        run: yarn install --production
      - name: Build static files
        run: yarn build
        env:
          CI: 1
          GITTER_ROOM_ID: ${{ secrets.GITTER_ROOM_ID }}
          GITTER_TOKEN: ${{ secrets.GITTER_TOKEN }}
      - name: Build image
        run: docker build -t gcr.io/${{ secrets.GCLOUD_PROJECT }}/${{ secrets.GCLOUD_APP }} .
      - name: Setup Google Cloud
        run: |
          curl https://sdk.cloud.google.com | bash && exec -l $SHELL
          gcloud components install beta --quiet
      - name: Authenticate Google Cloud
        run: |
          echo "$GCLOUD_AUTH" | base64 --decode > "$HOME"/service-account-key.json
          gcloud auth activate-service-account --key-file=$HOME/service-account-key.json
        env:
          GCLOUD_AUTH: ${{ secrets.GCLOUD_AUTH }}
      - name: Configure Docker to use Google Cloud
        run: gcloud auth configure-docker
      - name: Push image to registry
        run: docker push gcr.io/${{ secrets.GCLOUD_PROJECT }}/${{ secrets.GCLOUD_APP }}
      - name: Deploy image to the server
        run: gcloud beta run deploy ${{ secrets.GCLOUD_APP }} --quiet --image gcr.io/${{ secrets.GCLOUD_PROJECT }}/${{ secrets.GCLOUD_APP }} --project ${{ secrets.GCLOUD_PROJECT }} --region=us-east1 --platform managed
      - name: Clean CDN
        run: ./scripts/clean-cdn
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
      - name: Clean previous images from registry
        run: ./scripts/clean-images
  audit:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Warm CDN
        run: wget --page-requisites https://logux.io
      - name: Audit website
        uses: treosh/lighthouse-ci-action@v2
        with:
          runs: 3
          temporaryPublicStorage: true
          configPath: ./lighthouserc.json
      - name: Save results
        uses: actions/upload-artifact@v1
        with:
          name: lighthouse-results
          path: '.lighthouseci'
